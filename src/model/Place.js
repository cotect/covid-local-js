/**
 * COVID-19 Local API
 * API to get local help information about COVID-19 (hotlines, websites, test sites, health departments)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Place model module.
 * @module model/Place
 * @version 0.1.0
 */
class Place {
    /**
     * Constructs a new <code>Place</code>.
     * @alias module:model/Place
     * @param name {String} 
     * @param geonamesId {Number} 
     * @param searchProvider {String} 
     */
    constructor(name, geonamesId, searchProvider) { 
        
        Place.initialize(this, name, geonamesId, searchProvider);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, geonamesId, searchProvider) { 
        obj['name'] = name;
        obj['geonames_id'] = geonamesId;
        obj['search_provider'] = searchProvider;
    }

    /**
     * Constructs a <code>Place</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Place} obj Optional instance to populate.
     * @return {module:model/Place} The populated <code>Place</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Place();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('geonames_id')) {
                obj['geonames_id'] = ApiClient.convertToType(data['geonames_id'], 'Number');
            }
            if (data.hasOwnProperty('search_provider')) {
                obj['search_provider'] = ApiClient.convertToType(data['search_provider'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lon')) {
                obj['lon'] = ApiClient.convertToType(data['lon'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
Place.prototype['name'] = undefined;

/**
 * @member {Number} geonames_id
 */
Place.prototype['geonames_id'] = undefined;

/**
 * @member {String} search_provider
 */
Place.prototype['search_provider'] = undefined;

/**
 * @member {String} country
 */
Place.prototype['country'] = undefined;

/**
 * @member {String} country_code
 */
Place.prototype['country_code'] = undefined;

/**
 * @member {String} state
 */
Place.prototype['state'] = undefined;

/**
 * @member {String} description
 */
Place.prototype['description'] = undefined;

/**
 * @member {Number} lat
 */
Place.prototype['lat'] = undefined;

/**
 * @member {Number} lon
 */
Place.prototype['lon'] = undefined;






export default Place;

