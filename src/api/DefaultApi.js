/**
 * COVID-19 Local API
 * API to get local help information about COVID-19 (hotlines, websites, test sites, health departments)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnyType from '../model/AnyType';
import HTTPValidationError from '../model/HTTPValidationError';
import Place from '../model/Place';
import ResultsList from '../model/ResultsList';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAll operation.
     * @callback module:api/DefaultApi~getAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all items for a place
     * @param {Object} opts Optional parameters
     * @param {String} opts.placeName The name of the place, e.g. a city, neighborhood, state (either place_name or geonames_id must be provided)
     * @param {Number} opts.geonamesId The geonames.org id of the place (either place_name or geonames_id must be provided)
     * @param {Number} opts.maxDistance Maximum distance in degrees lon/lat for test sites (default to 0.5)
     * @param {Number} opts.limit Maximum number of test sites to return (default to 5)
     * @param {module:api/DefaultApi~getAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsList}
     */
    getAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'place_name': opts['placeName'],
        'geonames_id': opts['geonamesId'],
        'max_distance': opts['maxDistance'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultsList;
      return this.apiClient.callApi(
        '/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHealthDepartments operation.
     * @callback module:api/DefaultApi~getHealthDepartmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get responsible health departments for a place
     * @param {Object} opts Optional parameters
     * @param {String} opts.placeName The name of the place, e.g. a city, neighborhood, state (either place_name or geonames_id must be provided)
     * @param {Number} opts.geonamesId The geonames.org id of the place (either place_name or geonames_id must be provided)
     * @param {module:api/DefaultApi~getHealthDepartmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsList}
     */
    getHealthDepartments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'place_name': opts['placeName'],
        'geonames_id': opts['geonamesId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultsList;
      return this.apiClient.callApi(
        '/health_departments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHotlines operation.
     * @callback module:api/DefaultApi~getHotlinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hotlines for a place
     * @param {Object} opts Optional parameters
     * @param {String} opts.placeName The name of the place, e.g. a city, neighborhood, state (either place_name or geonames_id must be provided)
     * @param {Number} opts.geonamesId The geonames.org id of the place (either place_name or geonames_id must be provided)
     * @param {module:api/DefaultApi~getHotlinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsList}
     */
    getHotlines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'place_name': opts['placeName'],
        'geonames_id': opts['geonamesId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultsList;
      return this.apiClient.callApi(
        '/hotlines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestSites operation.
     * @callback module:api/DefaultApi~getTestSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get nearby test sites for a place (sorted by distance to place)
     * @param {Object} opts Optional parameters
     * @param {String} opts.placeName The name of the place, e.g. a city, neighborhood, state (either place_name or geonames_id must be provided)
     * @param {Number} opts.geonamesId The geonames.org id of the place (either place_name or geonames_id must be provided)
     * @param {Number} opts.maxDistance Maximum distance in degrees lon/lat for test sites (default to 0.5)
     * @param {Number} opts.limit Maximum number of test sites to return (default to 5)
     * @param {module:api/DefaultApi~getTestSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsList}
     */
    getTestSites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'place_name': opts['placeName'],
        'geonames_id': opts['geonamesId'],
        'max_distance': opts['maxDistance'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultsList;
      return this.apiClient.callApi(
        '/test_sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebsites operation.
     * @callback module:api/DefaultApi~getWebsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get websites for a place
     * @param {Object} opts Optional parameters
     * @param {String} opts.placeName The name of the place, e.g. a city, neighborhood, state (either place_name or geonames_id must be provided)
     * @param {Number} opts.geonamesId The geonames.org id of the place (either place_name or geonames_id must be provided)
     * @param {module:api/DefaultApi~getWebsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultsList}
     */
    getWebsites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'place_name': opts['placeName'],
        'geonames_id': opts['geonamesId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultsList;
      return this.apiClient.callApi(
        '/websites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPlaces operation.
     * @callback module:api/DefaultApi~searchPlacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Place>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for places via free-form query
     * @param {String} q Free-form query string (e.g. a city, neighborhood, state, ...)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of entries to return (default to 5)
     * @param {module:model/String} opts.searchProvider The search provider (only geonames supported so far) (default to 'geonames')
     * @param {module:api/DefaultApi~searchPlacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Place>}
     */
    searchPlaces(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchPlaces");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'limit': opts['limit'],
        'search_provider': opts['searchProvider']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Place];
      return this.apiClient.callApi(
        '/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the test operation.
     * @callback module:api/DefaultApi~testCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows all entries for Berlin Mitte (redirects to /all endpoint)
     * @param {module:api/DefaultApi~testCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyType}
     */
    test(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnyType;
      return this.apiClient.callApi(
        '/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
